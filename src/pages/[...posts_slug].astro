---
import type { CollectionEntry } from 'astro:content'
import { getCollection, render } from 'astro:content'
import Comments from '@/components/Comments/index.astro'
import PostDate from '@/components/PostDate.astro'
import TagsWrapper from '@/components/TagsWrapper.astro'
import BackButton from '@/components/Widgets/BackButton.astro'
import TOC from '@/components/Widgets/TOC.astro'
import { defaultLocale, moreLocales } from '@/config'
import Layout from '@/layouts/Layout.astro'
import { checkPostSlugDuplication } from '@/utils/content'
import { generateDescription } from '@/utils/description'

export async function getStaticPaths() {
  const posts = await getCollection('posts')

  // Check if there are duplicate post slugs
  const duplicates = await checkPostSlugDuplication(posts)
  if (duplicates.length > 0) {
    throw new Error(`Duplicate post slugs:\n${duplicates.join('\n')}`)
  }
  
  type PathItem = {
    params: { posts_slug: string }
    props: { post: any}
  }

  const paths: PathItem[] = []

  // Default locale
  posts.forEach((post: CollectionEntry<'posts'>) => {
    // Show drafts in dev mode only
    if ((import.meta.env.DEV || !post.data.draft)
      && (post.data.lang === defaultLocale || post.data.lang === '')) {
      const slug = post.data.abbrlink || post.id

      paths.push({
        params: { posts_slug: `posts/${slug}/` },
        props: {
          post,
        },
      })
    }
  })

  // More locales
  moreLocales.forEach((lang: string) => {
    posts.forEach((post: CollectionEntry<'posts'>) => {
      // Process posts with matching language or no language specified
      if ((import.meta.env.DEV || !post.data.draft)
        && (post.data.lang === lang || post.data.lang === '')) {
        const slug = post.data.abbrlink || post.id
        paths.push({
          params: { posts_slug: `${lang}/posts/${slug}/` },
          props: {
            post,
          },
        })
      }
    })
  })

  return paths
}

const { post } = Astro.props
const description = generateDescription(post, 'meta')
const { Content, headings, remarkPluginFrontmatter } = await render(post)
---

<Layout
  postTitle={post.data.title}
  postDescription={description}
  postSlug={post.id}
>
  <article class="heti mb-12.6">
    <div class="relative">
      <!-- Go Back Button On Desktop -->
      <BackButton />
      <!-- Title -->
      <h1 class="post-title">
        <span
          transition:name={`post-${post.data.abbrlink || post.id}`}
          data-disable-theme-transition
        >
          {post.data.title}
        </span>
      </h1>
    </div>

    <!-- Date -->
    <div
      id="gsap-post-date"
      class="mb-17.2 block c-primary font-time"
      transition:name={`time-${post.data.abbrlink || post.id}`}
      data-disable-theme-transition
    >
      <PostDate
        date={post.data.published}
        updatedDate={post.data.updated}
        minutes={remarkPluginFrontmatter.minutes}
      />
    </div>
    <!-- TOC -->
    {post.data.toc && <TOC headings={headings} />}
    <!-- Content -->
     <div id="gsap-post-content">
      <Content />
    </div>
  </article>

  <!-- Tags -->
  {post.data.tags?.length > 0 && (
    <div id="gsap-post-tags">
      <div class="uno-decorative-line"></div>
      <TagsWrapper
        tags={post.data.tags}
      />
    </div>
  )}
  <!-- Comments -->
  <Comments />
</Layout>
